// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Qvain dataset list PreservationStates should render <TablePasState /> 1`] = `
<Fragment>
  <Translate
    color="primary"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "tablePasState__PasLabel-sc-1w7mbwe-0",
          "isStatic": false,
          "rules": Array [
            "
  padding: 0.3em 0.6em 0.4em;
  border-radius: 0.2em;
  background: ",
            [Function],
            ";
  color: white;
  display: inline-block;
  margin: ",
            [Function],
            ";
",
            "
  margin-left: 10px;
  text-transform: uppercase;
",
          ],
        },
        "displayName": "tablePasState__PasLabel",
        "foldedComponentIds": Array [
          "label__Label-x0jqqw-0",
        ],
        "render": [Function],
        "styledComponentId": "tablePasState__PasLabel-sc-1w7mbwe-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    content="qvain.files.dataCatalog.pas"
  />
  <Translate
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "tablePasState__PasText-sc-1w7mbwe-1",
          "isStatic": true,
          "rules": Array [
            "
  margin-left: 10px;
  font-size: 0.8em;
  :before {
    content: '(';
  }
  :after {
    content: ')';
  }
",
          ],
        },
        "displayName": "tablePasState__PasText",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "tablePasState__PasText-sc-1w7mbwe-1",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    content="qvain.pasState.0"
  />
</Fragment>
`;

exports[`Qvain should render correctly 1`] = `
<card__QvainContainer>
  <Header
    datasetError={false}
    datasetLoading={false}
  />
  <StickyHeader
    datasetError={false}
    datasetLoading={false}
    handleSubmitError={[Function]}
    handleSubmitResponse={[Function]}
    response={null}
    submitButtonsRef={
      Object {
        "current": null,
      }
    }
    submitted={false}
  />
  <Dataset
    datasetError={false}
    datasetErrorDetails={null}
    datasetErrorTitle={null}
    handleRetry={[Function]}
    haveDataset={true}
    setFocusOnSubmitButton={[Function]}
  />
  <LooseActorsDialog />
  <LooseProvenanceDialog />
  <Translate
    attributes={
      Object {
        "message": "qvain.unsavedChanges",
      }
    }
    component={[Function]}
    when={false}
  />
</card__QvainContainer>
`;

exports[`Qvain.Description should render <Description /> 1`] = `
<div
  className="container"
>
  <title__SectionTitle>
    <Translate
      component="span"
      content="qvain.description.title"
    />
    <Tooltip
      align="Right"
      close={[Function]}
      isOpen={false}
      text={<DescriptionInfo />}
    >
      <HelpIcon
        aria-label="Description info"
        onClick={[Function]}
      />
    </Tooltip>
  </title__SectionTitle>
  <DescriptionField />
  <IssuedDateField />
  <OtherIdentifierField />
  <FieldOfScienceField />
  <LanguageField />
  <KeywordsField />
</div>
`;

exports[`Qvain.Description should render <DescriptionField /> 1`] = `
<TranslationTab
  language="fi"
  setLanguage={[Function]}
>
  <DescriptionFieldInput
    activeLang="fi"
    fieldName="Title"
    propName="title"
  />
  <DescriptionFieldTextField
    activeLang="fi"
    fieldName="Description"
    propName="description"
  />
  <Translate
    component="div"
    content="qvain.description.description.instructions"
  />
</TranslationTab>
`;

exports[`Qvain.Description should render <FieldOfScienceField /> 1`] = `
<Card
  bottomContent={false}
>
  <form__LabelLarge
    htmlFor="fieldOfScienceSelect"
  >
    <Translate
      component="span"
      content="qvain.description.fieldOfScience.title"
    />
  </form__LabelLarge>
  <Translate
    component="p"
    content="qvain.description.fieldOfScience.help"
  />
  <Translate
    attributes={
      Object {
        "placeholder": "qvain.description.fieldOfScience.placeholder",
      }
    }
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    getter={Array []}
    isClearable={false}
    isMulti={true}
    metaxIdentifier="field_of_science"
    model={[Function]}
    name="fieldOfScienceSelect"
    setter={[Function]}
  />
</Card>
`;

exports[`Qvain.Description should render <KeywordsField /> 1`] = `
<Card
  bottomContent={false}
>
  <form__LabelLarge
    htmlFor="keywordsInput"
  >
    <TooltipHover
      position="right"
      title="Required to save and publish"
    >
      <Translate
        component="span"
        content="qvain.description.keywords.title"
      />
       *
    </TooltipHover>
  </form__LabelLarge>
  <Translate
    component="p"
    content="qvain.description.keywords.help"
  />
  <Translate
    attributes={
      Object {
        "placeholder": "qvain.description.keywords.placeholder",
      }
    }
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "form__Input-sc-6aqd3o-1",
          "isStatic": true,
          "rules": Array [
            "
  width: 100%;
  border-radius: 3px;
  border: solid 1px #cccccc;
  padding: 8px;
  color: #000;
  margin-bottom: 1.25rem;
  display: block;
",
          ],
        },
        "displayName": "form__Input",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "form__Input-sc-6aqd3o-1",
        "target": "input",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    disabled={false}
    id="keywordsInput"
    onChange={[Function]}
    onKeyDown={[Function]}
    type="text"
    value=""
  />
  <validationError__ValidationError />
  <buttonContainers__ButtonContainer>
    <commonButtons__AddNewButton
      disabled={false}
      onClick={[Function]}
      type="button"
    >
      <Translate
        component="span"
        content="qvain.description.keywords.addButton"
      />
    </commonButtons__AddNewButton>
  </buttonContainers__ButtonContainer>
</Card>
`;

exports[`Qvain.Description should render <LanguageField /> 1`] = `
<Card
  bottomContent={false}
>
  <form__LabelLarge
    htmlFor="datasetLanguage"
  >
    <Translate
      component="span"
      content="qvain.description.datasetLanguage.title"
    />
  </form__LabelLarge>
  <Translate
    component="p"
    content="qvain.description.datasetLanguage.help"
  />
  <Select
    getter={Array []}
    id="datasetLanguage"
    inModal={false}
    isClearable={false}
    isMulti={true}
    metaxIdentifier="language"
    model={[Function]}
    name="dataset-language"
    noOptionsMessage={[Function]}
    placeholder="qvain.description.datasetLanguage.placeholder"
    search={true}
    setter={[Function]}
  />
</Card>
`;

exports[`Qvain.Description should render <OtherIdentifierField /> 1`] = `
<Card
  bottomContent={true}
>
  <form__LabelLarge
    htmlFor="otherIdentifiersInput"
  >
    <Translate
      component="span"
      content="qvain.description.otherIdentifiers.title"
    />
  </form__LabelLarge>
  <Translate
    component="p"
    content="qvain.description.otherIdentifiers.instructions"
  />
  <form__Input
    disabled={false}
    id="otherIdentifiersInput"
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="http://doi.org/"
    type="text"
    value=""
  />
  <buttonContainers__ButtonContainer>
    <commonButtons__AddNewButton
      disabled={false}
      onClick={[Function]}
      type="button"
    >
      <Translate
        component="span"
        content="qvain.description.otherIdentifiers.addButton"
      />
    </commonButtons__AddNewButton>
  </buttonContainers__ButtonContainer>
</Card>
`;

exports[`Qvain.RightsAndLicenses should render <AccessType /> 1`] = `
<Card
  bottomContent={false}
>
  <form__LabelLarge
    htmlFor="accessTypeSelect"
  >
    <Translate
      component="span"
      content="qvain.rightsAndLicenses.accessType.title"
    />
  </form__LabelLarge>
  <Translate
    attributes={
      Object {
        "placeholder": "qvain.rightsAndLicenses.accessType.placeholder",
      }
    }
    clearable={true}
    component={[Function]}
    getOptionLabel={[Function]}
    getOptionValue={[Function]}
    inputId="accessTypeSelect"
    isDisabled={false}
    name="accessType"
    onBlur={[Function]}
    onChange={[Function]}
    options={Array []}
    value={
      Object {
        "name": undefined,
        "url": "http://uri.suomi.fi/codelist/fairdata/access_type/code/open",
      }
    }
  />
  <validationError__ValidationError />
</Card>
`;

exports[`Qvain.RightsAndLicenses should render <Licenses /> 1`] = `
<Card
  bottomContent={false}
>
  <form__LabelLarge
    htmlFor="licenseSelect"
  >
    <Translate
      component="span"
      content="qvain.rightsAndLicenses.license.title"
    />
  </form__LabelLarge>
  <Translate
    component="p"
    content="qvain.rightsAndLicenses.license.infoText"
  />
  <Translate
    attributes={
      Object {
        "placeholder": "qvain.rightsAndLicenses.license.placeholder",
      }
    }
    component={[Function]}
    createOptionPosition="first"
    getNewOptionData={[Function]}
    getOptionLabel={[Function]}
    getOptionValue={[Function]}
    inputId="licenseSelect"
    isClearable={false}
    isDisabled={false}
    isMulti={true}
    name="license"
    onChange={[Function]}
    options={Array []}
    styles={
      Object {
        "multiValue": [Function],
        "multiValueLabel": [Function],
      }
    }
    value={
      Array [
        Object {
          "identifier": "http://uri.suomi.fi/codelist/fairdata/license/code/CC-BY-4.0",
          "name": undefined,
        },
      ]
    }
  />
  <ValidationErrors
    errors={Array []}
  />
</Card>
`;

exports[`Qvain.RightsAndLicenses should render <RightsAndLicenses /> 1`] = `
<div
  className="container"
>
  <title__SectionTitle>
    <Translate
      component="span"
      content="qvain.rightsAndLicenses.title"
    />
    <Tooltip
      align="Right"
      close={[Function]}
      isOpen={false}
      text={<LicensesInfo />}
    >
      <HelpIcon
        aria-label="Rights And Licenses info"
        onClick={[Function]}
      />
    </Tooltip>
  </title__SectionTitle>
  <WithTheme(Component) />
  <ForwardRef />
</div>
`;
