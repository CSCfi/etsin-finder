// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Qvain dataset list PreservationStates should render <TablePasState /> 1`] = `
<Fragment>
  <tablePasState__PasLabel
    color="primary"
  >
    PAS
  </tablePasState__PasLabel>
  <Translate
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "tablePasState__PasText-sc-1w7mbwe-1",
          "isStatic": true,
          "rules": Array [
            "
  margin-left: 10px;
  font-size: 0.8em;
  :before {
    content: '(';
  }
  :after {
    content: ')';
  }
",
          ],
        },
        "displayName": "tablePasState__PasText",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "tablePasState__PasText-sc-1w7mbwe-1",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    content="qvain.pasState.0"
  />
</Fragment>
`;

exports[`Qvain should render correctly 1`] = `
<ContextConsumer>
  <Component />
</ContextConsumer>
`;

exports[`Qvain.Description should render <Description /> 1`] = `
<div
  className="container"
>
  <title__SectionTitle>
    <Translate
      component="span"
      content="qvain.description.title"
    />
    <Tooltip
      align="Right"
      close={[Function]}
      isOpen={false}
      text={<DescriptionInfo />}
    >
      <HelpIcon
        aria-label="Description info"
        onClick={[Function]}
      />
    </Tooltip>
  </title__SectionTitle>
  <DescriptionField />
  <inject-IssuedDateField-with-Stores />
  <inject-OtherIdentifierField-with-Stores />
  <inject-FieldOfScienceField-with-Stores />
  <inject-LanguageField-with-Stores />
  <inject-KeywordsField-with-Stores />
</div>
`;

exports[`Qvain.Description should render <DescriptionField /> 1`] = `
<TranslationTab
  language="fi"
  setLanguage={[Function]}
>
  <inject-DescriptionFieldInput-with-Stores
    activeLang="fi"
    propName="title"
    schema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "en",
          "fi",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "en": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "fi": SchemaType {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [
              Condition {
                "fn": [Function],
                "refs": Array [
                  Reference {
                    "getter": [Function],
                    "isContext": false,
                    "isSibling": true,
                    "isValue": false,
                    "key": "en",
                    "map": undefined,
                    "path": "en",
                  },
                ],
              },
            ],
            "_deps": Array [
              "en",
            ],
            "_exclusive": Object {},
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "mixed",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [],
            "transforms": Array [],
            "type": "mixed",
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "object",
      }
    }
  />
  <inject-DescriptionFieldTextField-with-Stores
    activeLang="fi"
    propName="description"
    schema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "en",
          "fi",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "en": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "fi": SchemaType {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [
              Condition {
                "fn": [Function],
                "refs": Array [
                  Reference {
                    "getter": [Function],
                    "isContext": false,
                    "isSibling": true,
                    "isValue": false,
                    "key": "en",
                    "map": undefined,
                    "path": "en",
                  },
                ],
              },
            ],
            "_deps": Array [
              "en",
            ],
            "_exclusive": Object {},
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "mixed",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [],
            "transforms": Array [],
            "type": "mixed",
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "object",
      }
    }
  />
  <Translate
    component="div"
    content="qvain.description.description.instructions"
  />
</TranslationTab>
`;

exports[`Qvain.Description should render <FieldOfScienceField /> 1`] = `
<FieldOfScienceField
  Stores={
    Object {
      "Env": Env {
        "environment": "test",
        "history": RouterStore {
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "history": null,
          "push": [Function],
          "replace": [Function],
        },
        "metaxApiV2": true,
      },
      "Locale": Locale {},
      "Qvain": Qvain {
        "Actors": Actors {
          "Qvain": [Circular],
          "actorInEdit": null,
          "actors": Array [],
          "editDataset": [Function],
          "getDatasetOrganizations": [Function],
          "getReferenceOrganizations": [Function],
          "getReferenceOrganizationsForActor": [Function],
          "loadingReferenceOrganizations": Object {},
          "onSuccessfulCreationCallbacks": Array [],
          "referenceOrganizationErrors": Object {},
          "referenceOrganizations": Object {},
          "setSelectedActor": undefined,
          "toBackend": [Function],
        },
        "Env": Env {
          "environment": "test",
          "history": RouterStore {
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "history": null,
            "push": [Function],
            "replace": [Function],
          },
          "metaxApiV2": true,
        },
        "Files": Files {
          "AddItemsView": AddItemsView {
            "Files": [Circular],
            "checkedState": Object {},
            "defaultShowLimit": 20,
            "getTopmostChecked": [Function],
            "isOpen": [Function],
            "openState": Object {},
            "showLimitIncrement": 20,
            "showLimitState": Object {},
          },
          "Qvain": [Circular],
          "SelectedItemsView": SelectedItemsView {
            "Files": [Circular],
            "checkedState": Object {},
            "defaultShowLimit": 20,
            "getTopmostChecked": [Function],
            "hideRemoved": false,
            "isOpen": [Function],
            "openState": Object {},
            "showLimitIncrement": 20,
            "showLimitState": Object {},
          },
          "cache": Object {},
          "cancelOnReset": [Function],
          "datasetIdentifier": null,
          "fetchRootIdentifier": [Function],
          "getItemByPath": [Function],
          "inEdit": undefined,
          "loadingMetadata": null,
          "loadingProjectInfo": null,
          "loadingProjectRoot": null,
          "metadataToMetax": [Function],
          "originalMetadata": Object {},
          "projectLocked": false,
          "promiseManager": PromiseManager {
            "add": [Function],
            "promises": Array [],
          },
          "refreshModalDirectory": null,
          "root": null,
          "selectedProject": undefined,
        },
        "Provenances": Provenances {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "fieldName": "provenances",
          "readonly": false,
          "references": Array [
            "associations",
            "usedEntities",
            "spatials",
          ],
          "saveEdited": [Function],
          "saveNew": [Function],
          "toBackend": [Function],
        },
        "RelatedResources": RelatedResources {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "fieldName": "relatedResources",
          "readonly": false,
          "references": Array [],
          "relatedResourceToBackend": [Function],
          "saveEdited": [Function],
          "saveNew": [Function],
          "toBackend": [Function],
        },
        "Spatials": Spatials {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "clone": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "editMode": undefined,
          "fieldName": "spatials",
          "hasChanged": undefined,
          "inEdit": undefined,
          "readonly": false,
          "references": Array [],
          "saveEdited": [Function],
          "saveNew": [Function],
          "spatialToBackend": [Function],
          "storage": Array [],
          "toBackend": [Function],
          "validationError": undefined,
        },
        "Temporals": Temporals {
          "Model": [Function],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "editMode": false,
          "fieldName": "temporals",
          "hasChanged": false,
          "inEdit": Object {
            "endDate": undefined,
            "startDate": undefined,
            "uiid": 0,
          },
          "readonly": false,
          "references": Array [],
          "saveEdited": [Function],
          "saveNew": [Function],
          "storage": Array [],
          "toBackend": [Function],
          "validationError": undefined,
        },
        "accessType": Object {
          "name": undefined,
          "url": "http://uri.suomi.fi/codelist/fairdata/access_type/code/open",
        },
        "changed": false,
        "clearMetadataModalFile": undefined,
        "createExternalResourceUIId": [Function],
        "createLooseActorPromise": [Function],
        "createLooseProvenancePromise": [Function],
        "cumulativeState": 0,
        "dataCatalog": undefined,
        "datasetLanguageArray": Array [],
        "deprecated": false,
        "description": Object {
          "en": "",
          "fi": "",
        },
        "deselectChildren": [Function],
        "deselectParents": [Function],
        "embargoExpDate": undefined,
        "existingDirectories": Array [],
        "existingFiles": Array [],
        "extResFormOpen": false,
        "externalResourceInEdit": Object {
          "accessUrl": "",
          "downloadUrl": "",
          "id": undefined,
          "title": "",
          "useCategory": "",
        },
        "externalResources": Array [],
        "fieldOfScienceArray": Array [],
        "fixDeprecatedModalOpen": false,
        "hierarchy": Object {},
        "idaPickerOpen": false,
        "inEdit": undefined,
        "infrastructureArray": Array [],
        "issuedDate": undefined,
        "keywordString": "",
        "keywordsArray": Array [],
        "licenseArray": Array [
          Object {
            "identifier": "http://uri.suomi.fi/codelist/fairdata/license/code/CC-BY-4.0",
            "name": undefined,
          },
        ],
        "mergeArraysByIdentifier": [Function],
        "metadataModalFile": undefined,
        "newCumulativeState": 0,
        "original": undefined,
        "otherIdentifier": "",
        "otherIdentifiersArray": Array [],
        "otherIdentifiersValidationError": null,
        "preservationState": 0,
        "projects": Array [],
        "promptLooseActors": undefined,
        "promptLooseProvenances": undefined,
        "provenancesWithNonExistingActors": Array [],
        "restrictionGrounds": undefined,
        "selectedDirectories": Array [],
        "selectedFiles": Array [],
        "selectedProject": undefined,
        "setOtherIdentifierValidationError": [Function],
        "title": Object {
          "en": "",
          "fi": "",
        },
        "useDoi": false,
      },
    }
  }
/>
`;

exports[`Qvain.Description should render <KeywordsField /> 1`] = `
<KeywordsField
  Stores={
    Object {
      "Env": Env {
        "environment": "test",
        "history": RouterStore {
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "history": null,
          "push": [Function],
          "replace": [Function],
        },
        "metaxApiV2": true,
      },
      "Locale": Locale {},
      "Qvain": Qvain {
        "Actors": Actors {
          "Qvain": [Circular],
          "actorInEdit": null,
          "actors": Array [],
          "editDataset": [Function],
          "getDatasetOrganizations": [Function],
          "getReferenceOrganizations": [Function],
          "getReferenceOrganizationsForActor": [Function],
          "loadingReferenceOrganizations": Object {},
          "onSuccessfulCreationCallbacks": Array [],
          "referenceOrganizationErrors": Object {},
          "referenceOrganizations": Object {},
          "setSelectedActor": undefined,
          "toBackend": [Function],
        },
        "Env": Env {
          "environment": "test",
          "history": RouterStore {
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "history": null,
            "push": [Function],
            "replace": [Function],
          },
          "metaxApiV2": true,
        },
        "Files": Files {
          "AddItemsView": AddItemsView {
            "Files": [Circular],
            "checkedState": Object {},
            "defaultShowLimit": 20,
            "getTopmostChecked": [Function],
            "isOpen": [Function],
            "openState": Object {},
            "showLimitIncrement": 20,
            "showLimitState": Object {},
          },
          "Qvain": [Circular],
          "SelectedItemsView": SelectedItemsView {
            "Files": [Circular],
            "checkedState": Object {},
            "defaultShowLimit": 20,
            "getTopmostChecked": [Function],
            "hideRemoved": false,
            "isOpen": [Function],
            "openState": Object {},
            "showLimitIncrement": 20,
            "showLimitState": Object {},
          },
          "cache": Object {},
          "cancelOnReset": [Function],
          "datasetIdentifier": null,
          "fetchRootIdentifier": [Function],
          "getItemByPath": [Function],
          "inEdit": undefined,
          "loadingMetadata": null,
          "loadingProjectInfo": null,
          "loadingProjectRoot": null,
          "metadataToMetax": [Function],
          "originalMetadata": Object {},
          "projectLocked": false,
          "promiseManager": PromiseManager {
            "add": [Function],
            "promises": Array [],
          },
          "refreshModalDirectory": null,
          "root": null,
          "selectedProject": undefined,
        },
        "Provenances": Provenances {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "fieldName": "provenances",
          "readonly": false,
          "references": Array [
            "associations",
            "usedEntities",
            "spatials",
          ],
          "saveEdited": [Function],
          "saveNew": [Function],
          "toBackend": [Function],
        },
        "RelatedResources": RelatedResources {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "fieldName": "relatedResources",
          "readonly": false,
          "references": Array [],
          "relatedResourceToBackend": [Function],
          "saveEdited": [Function],
          "saveNew": [Function],
          "toBackend": [Function],
        },
        "Spatials": Spatials {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "clone": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "editMode": undefined,
          "fieldName": "spatials",
          "hasChanged": undefined,
          "inEdit": undefined,
          "readonly": false,
          "references": Array [],
          "saveEdited": [Function],
          "saveNew": [Function],
          "spatialToBackend": [Function],
          "storage": Array [],
          "toBackend": [Function],
          "validationError": undefined,
        },
        "Temporals": Temporals {
          "Model": [Function],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "editMode": false,
          "fieldName": "temporals",
          "hasChanged": false,
          "inEdit": Object {
            "endDate": undefined,
            "startDate": undefined,
            "uiid": 0,
          },
          "readonly": false,
          "references": Array [],
          "saveEdited": [Function],
          "saveNew": [Function],
          "storage": Array [],
          "toBackend": [Function],
          "validationError": undefined,
        },
        "accessType": Object {
          "name": undefined,
          "url": "http://uri.suomi.fi/codelist/fairdata/access_type/code/open",
        },
        "changed": false,
        "clearMetadataModalFile": undefined,
        "createExternalResourceUIId": [Function],
        "createLooseActorPromise": [Function],
        "createLooseProvenancePromise": [Function],
        "cumulativeState": 0,
        "dataCatalog": undefined,
        "datasetLanguageArray": Array [],
        "deprecated": false,
        "description": Object {
          "en": "",
          "fi": "",
        },
        "deselectChildren": [Function],
        "deselectParents": [Function],
        "embargoExpDate": undefined,
        "existingDirectories": Array [],
        "existingFiles": Array [],
        "extResFormOpen": false,
        "externalResourceInEdit": Object {
          "accessUrl": "",
          "downloadUrl": "",
          "id": undefined,
          "title": "",
          "useCategory": "",
        },
        "externalResources": Array [],
        "fieldOfScienceArray": Array [],
        "fixDeprecatedModalOpen": false,
        "hierarchy": Object {},
        "idaPickerOpen": false,
        "inEdit": undefined,
        "infrastructureArray": Array [],
        "issuedDate": undefined,
        "keywordString": "",
        "keywordsArray": Array [],
        "licenseArray": Array [
          Object {
            "identifier": "http://uri.suomi.fi/codelist/fairdata/license/code/CC-BY-4.0",
            "name": undefined,
          },
        ],
        "mergeArraysByIdentifier": [Function],
        "metadataModalFile": undefined,
        "newCumulativeState": 0,
        "original": undefined,
        "otherIdentifier": "",
        "otherIdentifiersArray": Array [],
        "otherIdentifiersValidationError": null,
        "preservationState": 0,
        "projects": Array [],
        "promptLooseActors": undefined,
        "promptLooseProvenances": undefined,
        "provenancesWithNonExistingActors": Array [],
        "restrictionGrounds": undefined,
        "selectedDirectories": Array [],
        "selectedFiles": Array [],
        "selectedProject": undefined,
        "setOtherIdentifierValidationError": [Function],
        "title": Object {
          "en": "",
          "fi": "",
        },
        "useDoi": false,
      },
    }
  }
/>
`;

exports[`Qvain.Description should render <LanguageField /> 1`] = `
<LanguageField
  Stores={
    Object {
      "Env": Env {
        "environment": "test",
        "history": RouterStore {
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "history": null,
          "push": [Function],
          "replace": [Function],
        },
        "metaxApiV2": true,
      },
      "Locale": Locale {},
      "Qvain": Qvain {
        "Actors": Actors {
          "Qvain": [Circular],
          "actorInEdit": null,
          "actors": Array [],
          "editDataset": [Function],
          "getDatasetOrganizations": [Function],
          "getReferenceOrganizations": [Function],
          "getReferenceOrganizationsForActor": [Function],
          "loadingReferenceOrganizations": Object {},
          "onSuccessfulCreationCallbacks": Array [],
          "referenceOrganizationErrors": Object {},
          "referenceOrganizations": Object {},
          "setSelectedActor": undefined,
          "toBackend": [Function],
        },
        "Env": Env {
          "environment": "test",
          "history": RouterStore {
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "history": null,
            "push": [Function],
            "replace": [Function],
          },
          "metaxApiV2": true,
        },
        "Files": Files {
          "AddItemsView": AddItemsView {
            "Files": [Circular],
            "checkedState": Object {},
            "defaultShowLimit": 20,
            "getTopmostChecked": [Function],
            "isOpen": [Function],
            "openState": Object {},
            "showLimitIncrement": 20,
            "showLimitState": Object {},
          },
          "Qvain": [Circular],
          "SelectedItemsView": SelectedItemsView {
            "Files": [Circular],
            "checkedState": Object {},
            "defaultShowLimit": 20,
            "getTopmostChecked": [Function],
            "hideRemoved": false,
            "isOpen": [Function],
            "openState": Object {},
            "showLimitIncrement": 20,
            "showLimitState": Object {},
          },
          "cache": Object {},
          "cancelOnReset": [Function],
          "datasetIdentifier": null,
          "fetchRootIdentifier": [Function],
          "getItemByPath": [Function],
          "inEdit": undefined,
          "loadingMetadata": null,
          "loadingProjectInfo": null,
          "loadingProjectRoot": null,
          "metadataToMetax": [Function],
          "originalMetadata": Object {},
          "projectLocked": false,
          "promiseManager": PromiseManager {
            "add": [Function],
            "promises": Array [],
          },
          "refreshModalDirectory": null,
          "root": null,
          "selectedProject": undefined,
        },
        "Provenances": Provenances {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "fieldName": "provenances",
          "readonly": false,
          "references": Array [
            "associations",
            "usedEntities",
            "spatials",
          ],
          "saveEdited": [Function],
          "saveNew": [Function],
          "toBackend": [Function],
        },
        "RelatedResources": RelatedResources {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "fieldName": "relatedResources",
          "readonly": false,
          "references": Array [],
          "relatedResourceToBackend": [Function],
          "saveEdited": [Function],
          "saveNew": [Function],
          "toBackend": [Function],
        },
        "Spatials": Spatials {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "clone": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "editMode": undefined,
          "fieldName": "spatials",
          "hasChanged": undefined,
          "inEdit": undefined,
          "readonly": false,
          "references": Array [],
          "saveEdited": [Function],
          "saveNew": [Function],
          "spatialToBackend": [Function],
          "storage": Array [],
          "toBackend": [Function],
          "validationError": undefined,
        },
        "Temporals": Temporals {
          "Model": [Function],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "editMode": false,
          "fieldName": "temporals",
          "hasChanged": false,
          "inEdit": Object {
            "endDate": undefined,
            "startDate": undefined,
            "uiid": 0,
          },
          "readonly": false,
          "references": Array [],
          "saveEdited": [Function],
          "saveNew": [Function],
          "storage": Array [],
          "toBackend": [Function],
          "validationError": undefined,
        },
        "accessType": Object {
          "name": undefined,
          "url": "http://uri.suomi.fi/codelist/fairdata/access_type/code/open",
        },
        "changed": false,
        "clearMetadataModalFile": undefined,
        "createExternalResourceUIId": [Function],
        "createLooseActorPromise": [Function],
        "createLooseProvenancePromise": [Function],
        "cumulativeState": 0,
        "dataCatalog": undefined,
        "datasetLanguageArray": Array [],
        "deprecated": false,
        "description": Object {
          "en": "",
          "fi": "",
        },
        "deselectChildren": [Function],
        "deselectParents": [Function],
        "embargoExpDate": undefined,
        "existingDirectories": Array [],
        "existingFiles": Array [],
        "extResFormOpen": false,
        "externalResourceInEdit": Object {
          "accessUrl": "",
          "downloadUrl": "",
          "id": undefined,
          "title": "",
          "useCategory": "",
        },
        "externalResources": Array [],
        "fieldOfScienceArray": Array [],
        "fixDeprecatedModalOpen": false,
        "hierarchy": Object {},
        "idaPickerOpen": false,
        "inEdit": undefined,
        "infrastructureArray": Array [],
        "issuedDate": undefined,
        "keywordString": "",
        "keywordsArray": Array [],
        "licenseArray": Array [
          Object {
            "identifier": "http://uri.suomi.fi/codelist/fairdata/license/code/CC-BY-4.0",
            "name": undefined,
          },
        ],
        "mergeArraysByIdentifier": [Function],
        "metadataModalFile": undefined,
        "newCumulativeState": 0,
        "original": undefined,
        "otherIdentifier": "",
        "otherIdentifiersArray": Array [],
        "otherIdentifiersValidationError": null,
        "preservationState": 0,
        "projects": Array [],
        "promptLooseActors": undefined,
        "promptLooseProvenances": undefined,
        "provenancesWithNonExistingActors": Array [],
        "restrictionGrounds": undefined,
        "selectedDirectories": Array [],
        "selectedFiles": Array [],
        "selectedProject": undefined,
        "setOtherIdentifierValidationError": [Function],
        "title": Object {
          "en": "",
          "fi": "",
        },
        "useDoi": false,
      },
    }
  }
/>
`;

exports[`Qvain.Description should render <OtherIdentifierField /> 1`] = `
<OtherIdentifierField
  Stores={
    Object {
      "Env": Env {
        "environment": "test",
        "history": RouterStore {
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "history": null,
          "push": [Function],
          "replace": [Function],
        },
        "metaxApiV2": true,
      },
      "Locale": Locale {},
      "Qvain": Qvain {
        "Actors": Actors {
          "Qvain": [Circular],
          "actorInEdit": null,
          "actors": Array [],
          "editDataset": [Function],
          "getDatasetOrganizations": [Function],
          "getReferenceOrganizations": [Function],
          "getReferenceOrganizationsForActor": [Function],
          "loadingReferenceOrganizations": Object {},
          "onSuccessfulCreationCallbacks": Array [],
          "referenceOrganizationErrors": Object {},
          "referenceOrganizations": Object {},
          "setSelectedActor": undefined,
          "toBackend": [Function],
        },
        "Env": Env {
          "environment": "test",
          "history": RouterStore {
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "history": null,
            "push": [Function],
            "replace": [Function],
          },
          "metaxApiV2": true,
        },
        "Files": Files {
          "AddItemsView": AddItemsView {
            "Files": [Circular],
            "checkedState": Object {},
            "defaultShowLimit": 20,
            "getTopmostChecked": [Function],
            "isOpen": [Function],
            "openState": Object {},
            "showLimitIncrement": 20,
            "showLimitState": Object {},
          },
          "Qvain": [Circular],
          "SelectedItemsView": SelectedItemsView {
            "Files": [Circular],
            "checkedState": Object {},
            "defaultShowLimit": 20,
            "getTopmostChecked": [Function],
            "hideRemoved": false,
            "isOpen": [Function],
            "openState": Object {},
            "showLimitIncrement": 20,
            "showLimitState": Object {},
          },
          "cache": Object {},
          "cancelOnReset": [Function],
          "datasetIdentifier": null,
          "fetchRootIdentifier": [Function],
          "getItemByPath": [Function],
          "inEdit": undefined,
          "loadingMetadata": null,
          "loadingProjectInfo": null,
          "loadingProjectRoot": null,
          "metadataToMetax": [Function],
          "originalMetadata": Object {},
          "projectLocked": false,
          "promiseManager": PromiseManager {
            "add": [Function],
            "promises": Array [],
          },
          "refreshModalDirectory": null,
          "root": null,
          "selectedProject": undefined,
        },
        "Provenances": Provenances {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "fieldName": "provenances",
          "readonly": false,
          "references": Array [
            "associations",
            "usedEntities",
            "spatials",
          ],
          "saveEdited": [Function],
          "saveNew": [Function],
          "toBackend": [Function],
        },
        "RelatedResources": RelatedResources {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "fieldName": "relatedResources",
          "readonly": false,
          "references": Array [],
          "relatedResourceToBackend": [Function],
          "saveEdited": [Function],
          "saveNew": [Function],
          "toBackend": [Function],
        },
        "Spatials": Spatials {
          "Model": [Function],
          "Qvain": [Circular],
          "Template": [Function],
          "attachRefs": [Function],
          "clone": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "editMode": undefined,
          "fieldName": "spatials",
          "hasChanged": undefined,
          "inEdit": undefined,
          "readonly": false,
          "references": Array [],
          "saveEdited": [Function],
          "saveNew": [Function],
          "spatialToBackend": [Function],
          "storage": Array [],
          "toBackend": [Function],
          "validationError": undefined,
        },
        "Temporals": Temporals {
          "Model": [Function],
          "Template": [Function],
          "attachRefs": [Function],
          "cloneRefs": [Function],
          "detachRefs": [Function],
          "editMode": false,
          "fieldName": "temporals",
          "hasChanged": false,
          "inEdit": Object {
            "endDate": undefined,
            "startDate": undefined,
            "uiid": 0,
          },
          "readonly": false,
          "references": Array [],
          "saveEdited": [Function],
          "saveNew": [Function],
          "storage": Array [],
          "toBackend": [Function],
          "validationError": undefined,
        },
        "accessType": Object {
          "name": undefined,
          "url": "http://uri.suomi.fi/codelist/fairdata/access_type/code/open",
        },
        "changed": false,
        "clearMetadataModalFile": undefined,
        "createExternalResourceUIId": [Function],
        "createLooseActorPromise": [Function],
        "createLooseProvenancePromise": [Function],
        "cumulativeState": 0,
        "dataCatalog": undefined,
        "datasetLanguageArray": Array [],
        "deprecated": false,
        "description": Object {
          "en": "",
          "fi": "",
        },
        "deselectChildren": [Function],
        "deselectParents": [Function],
        "embargoExpDate": undefined,
        "existingDirectories": Array [],
        "existingFiles": Array [],
        "extResFormOpen": false,
        "externalResourceInEdit": Object {
          "accessUrl": "",
          "downloadUrl": "",
          "id": undefined,
          "title": "",
          "useCategory": "",
        },
        "externalResources": Array [],
        "fieldOfScienceArray": Array [],
        "fixDeprecatedModalOpen": false,
        "hierarchy": Object {},
        "idaPickerOpen": false,
        "inEdit": undefined,
        "infrastructureArray": Array [],
        "issuedDate": undefined,
        "keywordString": "",
        "keywordsArray": Array [],
        "licenseArray": Array [
          Object {
            "identifier": "http://uri.suomi.fi/codelist/fairdata/license/code/CC-BY-4.0",
            "name": undefined,
          },
        ],
        "mergeArraysByIdentifier": [Function],
        "metadataModalFile": undefined,
        "newCumulativeState": 0,
        "original": undefined,
        "otherIdentifier": "",
        "otherIdentifiersArray": Array [],
        "otherIdentifiersValidationError": null,
        "preservationState": 0,
        "projects": Array [],
        "promptLooseActors": undefined,
        "promptLooseProvenances": undefined,
        "provenancesWithNonExistingActors": Array [],
        "restrictionGrounds": undefined,
        "selectedDirectories": Array [],
        "selectedFiles": Array [],
        "selectedProject": undefined,
        "setOtherIdentifierValidationError": [Function],
        "title": Object {
          "en": "",
          "fi": "",
        },
        "useDoi": false,
      },
    }
  }
/>
`;

exports[`Qvain.RightsAndLicenses should render <AccessType /> 1`] = `
<Card
  bottomContent={false}
>
  <form__LabelLarge
    htmlFor="accessTypeSelect"
  >
    <Translate
      component="span"
      content="qvain.rightsAndLicenses.accessType.title"
    />
  </form__LabelLarge>
  <Translate
    attributes={
      Object {
        "placeholder": "qvain.rightsAndLicenses.accessType.placeholder",
      }
    }
    clearable={true}
    component={[Function]}
    getOptionLabel={[Function]}
    getOptionValue={[Function]}
    inputId="accessTypeSelect"
    isDisabled={false}
    name="accessType"
    onBlur={[Function]}
    onChange={[Function]}
    options={Array []}
    value={
      Object {
        "name": undefined,
        "url": "http://uri.suomi.fi/codelist/fairdata/access_type/code/open",
      }
    }
  />
  <validationError__ValidationError />
</Card>
`;

exports[`Qvain.RightsAndLicenses should render <Licenses /> 1`] = `
<Card
  bottomContent={false}
>
  <form__LabelLarge
    htmlFor="licenseSelect"
  >
    <Translate
      component="span"
      content="qvain.rightsAndLicenses.license.title"
    />
  </form__LabelLarge>
  <Translate
    component="p"
    content="qvain.rightsAndLicenses.license.infoText"
  />
  <Translate
    attributes={
      Object {
        "placeholder": "qvain.rightsAndLicenses.license.placeholder",
      }
    }
    component={[Function]}
    createOptionPosition="first"
    getNewOptionData={[Function]}
    getOptionLabel={[Function]}
    getOptionValue={[Function]}
    inputId="licenseSelect"
    isClearable={false}
    isDisabled={false}
    isMulti={true}
    name="license"
    onChange={[Function]}
    options={Array []}
    styles={
      Object {
        "multiValue": [Function],
        "multiValueLabel": [Function],
      }
    }
    value={
      Array [
        Object {
          "identifier": "http://uri.suomi.fi/codelist/fairdata/license/code/CC-BY-4.0",
          "name": undefined,
        },
      ]
    }
  />
  <ValidationErrors
    errors={Array []}
  />
</Card>
`;

exports[`Qvain.RightsAndLicenses should render <RightsAndLicenses /> 1`] = `
<div
  className="container"
>
  <title__SectionTitle>
    <Translate
      component="span"
      content="qvain.rightsAndLicenses.title"
    />
    <Tooltip
      align="Right"
      close={[Function]}
      isOpen={false}
      text={<LicensesInfo />}
    >
      <HelpIcon
        aria-label="Rights And Licenses info"
        onClick={[Function]}
      />
    </Tooltip>
  </title__SectionTitle>
  <WithTheme(inject-License-with-Stores) />
  <inject-AccessType-with-Stores />
</div>
`;
