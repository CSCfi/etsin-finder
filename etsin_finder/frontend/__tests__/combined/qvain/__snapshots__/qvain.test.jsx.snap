// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Qvain dataset list PreservationStates should render <TablePasState /> 1`] = `
<Fragment>
  <Translate
    color="primary"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": e {
          "baseHash": -703652486,
          "baseStyle": e {
            "baseHash": -1988014698,
            "baseStyle": undefined,
            "componentId": "label__Label-x0jqqw-0",
            "isStatic": false,
            "rules": Array [
              "
  padding: 0.3em 0.6em 0.4em;
  border-radius: 0.2em;
  background: ",
              [Function],
              ";
  color: white;
  display: inline-block;
  margin: ",
              [Function],
              ";
",
            ],
            "staticRulesId": "",
          },
          "componentId": "tablePasState__PasLabel-kh2b5p-0",
          "isStatic": false,
          "rules": Array [
            "
  margin-left: 10px;
  text-transform: uppercase;
",
          ],
          "staticRulesId": "",
        },
        "displayName": "tablePasState__PasLabel",
        "foldedComponentIds": Array [
          "label__Label-x0jqqw-0",
        ],
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "tablePasState__PasLabel-kh2b5p-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    content="qvain.files.dataCatalog.pas"
  />
  <Translate
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": e {
          "baseHash": -1476272384,
          "baseStyle": undefined,
          "componentId": "tablePasState__PasText-kh2b5p-1",
          "isStatic": false,
          "rules": Array [
            "
  margin-left: 10px;
  font-size: 0.8em;
  :before {
    content: '(';
  }
  :after {
    content: ')';
  }
",
          ],
          "staticRulesId": "",
        },
        "displayName": "tablePasState__PasText",
        "foldedComponentIds": Array [],
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "tablePasState__PasText-kh2b5p-1",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    content="qvain.pasState.0"
  />
</Fragment>
`;

exports[`Qvain should render correctly 1`] = `
<card__QvainContainer>
  <Header
    datasetError={false}
    datasetLoading={false}
  />
  <StickyHeader
    clearSubmitResponse={[Function]}
    datasetError={false}
    datasetLoading={false}
    handleSubmitError={[Function]}
    handleSubmitResponse={[Function]}
    hideSubmitButtons={false}
    response={null}
    submitButtonsRef={
      Object {
        "current": null,
      }
    }
    submitted={false}
  />
  <ErrorBoundary
    ContainerComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "className": "error",
          },
        ],
        "componentStyle": e {
          "baseHash": -342646166,
          "baseStyle": undefined,
          "componentId": "errorBoundary__ErrorContainer-kebdqo-0",
          "isStatic": false,
          "rules": Array [
            "
  && {
    padding-left: 2rem;
    padding-right: 2rem;
  }
",
          ],
          "staticRulesId": "",
        },
        "displayName": "errorBoundary__ErrorContainer",
        "foldedComponentIds": Array [],
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "errorBoundary__ErrorContainer-kebdqo-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    callback={[Function]}
    title={
      <Translate
        component="h2"
        content="qvain.error.render"
      />
    }
  >
    <Dataset
      datasetError={false}
      datasetErrorDetails={null}
      datasetErrorTitle={null}
      handleRetry={[Function]}
      handleSubmitError={[Function]}
      handleSubmitResponse={[Function]}
      haveDataset={true}
      setFocusOnSubmitButton={[Function]}
    />
  </ErrorBoundary>
  <LooseActorsDialog />
  <LooseProvenanceDialog />
  <Translate
    attributes={
      Object {
        "message": "qvain.unsavedChanges",
      }
    }
    component={[Function]}
    when={false}
  />
</card__QvainContainer>
`;

exports[`Qvain.Description should render <LanguageField /> 1`] = `
<Card
  bottomContent={false}
>
  <form__LabelLarge
    htmlFor="dataset-language-select"
  >
    <Translate
      component="span"
      content="qvain.description.datasetLanguage.title"
    />
  </form__LabelLarge>
  <Translate
    component="p"
    content="qvain.description.datasetLanguage.help"
  />
  <SearchSelect
    getter={Array []}
    id="datasetLanguage"
    inModal={false}
    isClearable={false}
    isMulti={true}
    metaxIdentifier="language"
    model={[Function]}
    name="dataset-language"
    noOptionsMessage={[Function]}
    placeholder="qvain.description.datasetLanguage.placeholder"
    search={true}
    setter={[Function]}
  />
</Card>
`;

exports[`Qvain.Description should render <OtherIdentifierField /> 1`] = `
<Card
  bottomContent={true}
>
  <form__LabelLarge
    htmlFor="other-identifiers-input"
  >
    <Translate
      component="span"
      content="qvain.description.otherIdentifiers.title"
    />
  </form__LabelLarge>
  <Translate
    component="p"
    content="qvain.description.otherIdentifiers.instructions"
  />
  <StringArray
    addItemStr={[Function]}
    addWithComma={true}
    id="other-identifiers-input"
    itemSchema={
      StringSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_deps": Array [],
        "_exclusive": Object {
          "max": true,
          "min": true,
          "url": false,
        },
        "_mutate": undefined,
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "string",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "tests": Array [
          [Function],
          [Function],
          [Function],
        ],
        "transforms": Array [
          [Function],
        ],
        "type": "string",
      }
    }
    itemStr=""
    readonly={false}
    required={false}
    schema={
      ArraySchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_deps": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nullable": true,
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_subType": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "url": false,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "_type": "array",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "innerType": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "url": false,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "array",
      }
    }
    set={[Function]}
    setItemStr={[Function]}
    setValidationError={[Function]}
    translationsRoot="qvain.description.otherIdentifiers"
    validationError=""
    value={Array []}
  />
</Card>
`;
